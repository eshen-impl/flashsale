version: "3.8"

services:

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761" # Expose Eureka for service registration
    environment:
      - SERVER_PORT=8761
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
    networks:
      - my-network

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "9000:9000"  # Expose only the gateway
    environment:
      - SERVER_PORT=9000
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATA_REDIS_HOST=host.docker.internal
      - SPRING_DATA_REDIS_PORT=6379
    depends_on:
      - eureka-server
    networks:
      - my-network

#  Microservices (NOT EXPOSED, only accessible within the network)
  account-service:
    build: ./account-service
    container_name: account-service
#    ports:
#      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/emart_account?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=ying1234
      - SPRING_DATA_REDIS_HOST=host.docker.internal
      - SPRING_DATA_REDIS_PORT=6379
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
#      - redis
    networks:
      - my-network

  item-service:
    build: ./item-service
    container_name: item-service
#    ports:
#      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/emart_item?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=ying1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATA_REDIS_HOST=host.docker.internal
      - SPRING_DATA_REDIS_PORT=6379
    depends_on:
      - eureka-server
#      - redis
    networks:
      - my-network

#  cart-service:
#    build: ./cart-service
#    container_name: cart-service
#    ports:
#      - "8082:8082"
#    environment:
#      - SERVER_PORT=8082
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
#      - SPRING_DATA_REDIS_HOST=redis
#      - SPRING_DATA_REDIS_PORT=6379
#    depends_on:
#      - eureka-server
#      - redis
#    networks:
#      - my-network

  order-service:
    build: ./order-service
    container_name: order-service
#    ports:
#      - "8083:8083"
    environment:
      - SERVER_PORT=8083
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/emart_order?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=ying1234
#      - SPRING_CASSANDRA_CONTACT_POINTS=cassandra
#      - SPRING_CASSANDRA_PORT=9042
#      - SPRING_CASSANDRA_KEYSPACE=emart_order
      - SPRING_DATA_REDIS_HOST=host.docker.internal
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9091
    depends_on:
      eureka-server:
        condition: service_started
#      redis:
#        condition: service_started
#      cassandra:
#        condition: service_healthy
#      cassandra-init:
#        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - my-network

#  payment-service:
#    build: ./payment-service
#    container_name: payment-service
#    ports:
#      - "8084:8084"
#    environment:
#      - SERVER_PORT=8084
#      - SPRING_DATASOURCE_URL=jdbc:mysql://database-1.chs06sag2xwn.us-west-2.rds.amazonaws.com:3306/emart_payment?useSSL=false&serverTimezone=UTC
#      - SPRING_DATASOURCE_USERNAME=admin
#      - SPRING_DATASOURCE_PASSWORD=ying1234
#      - SPRING_DATA_REDIS_HOST=redis
#      - SPRING_DATA_REDIS_PORT=6379
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9091
#    depends_on:
#      eureka-server:
#        condition: service_started
#      redis:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#    networks:
#      - my-network
#
#  shipping-service:
#    build: ./shipping-service
#    container_name: shipping-service
#    ports:
#      - "8085:8085"
#    environment:
#      - SERVER_PORT=8085
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9091
#    depends_on:
#      kafka:
#        condition: service_healthy
#    networks:
#      - my-network

#  redis:
#    image: redis:alpine
#    container_name: redis
#    ports:
#      - "6379:6379"
#    networks:
#      - my-network

#  cassandra:
#    image: cassandra:latest
#    container_name: cassandra
#    ports:
#      - "9042:9042"
#    volumes:
#      - ./docker-data/cassandra:/var/lib/cassandra
#    healthcheck:
#      test: [ "CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES" ]
#      interval: 15s
#      timeout: 10s
#      retries: 10
#    environment:
#      - MAX_HEAP_SIZE=256M
#      - HEAP_NEWSIZE=128M
#      - CASSANDRA_CLUSTER_NAME=MyCluster
#    networks:
#      - my-network
#
#  cassandra-init:
#    image: cassandra:latest
#    container_name: cassandra-init
#    depends_on:
#      cassandra:
#        condition: service_healthy
#    volumes:
#      - ./init.cql:/init.cql
#    healthcheck:
#      test: [ "CMD", "sh", "-c", "cqlsh cassandra -e 'DESCRIBE KEYSPACES' | grep -q 'emart_order'" ]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#    entrypoint: [ "sh", "-c", "cqlsh cassandra -f /init.cql && echo 'Schema created successfully!' && sleep 60" ]
#    networks:
#      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - '12181:12181'
      - '2888:2888'
      - '3888:3888'
    volumes:
      - ./docker-data/kafkazoo/zoo1/data:/var/lib/zookeeper/data
      - ./docker-data/kafkazoo/zoo1/log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 12181
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8088:8088
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SERVER_PORT: 8088
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29091
      KAFKA_CLUSTERS_0_METRICS_PORT: 19101
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: unless-stopped
    ports:
      - '9091:9091'
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - ./docker-data/kafkazoo/kafka1:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:12181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29091,EXTERNAL://kafka:9091
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_JMX_PORT: 19101
      KAFKA_JMX_HOSTNAME: kafka
    healthcheck:
      test: nc -vz localhost 9091
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

networks:
  my-network:
    driver: bridge